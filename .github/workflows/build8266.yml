name: build8266

on: [push]

env:
  UPLOAD_USER_FIRMWARE: false

jobs:
  # Borrowed from and credit to https://github.com/UncleRus/esp-idf-lib
  build_esp8266:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_method:

          # XXX build examples with make only
          # idf.py in ESP8266 RTOS SDK is broken in many ways.
          - make
        branch:
          - v3.4
          - master
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Copy SDK Config
        run: |
          cp boards/esp8266-rtossdk/* .
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          sudo apt-get install \
            bison \
            ccache \
            flex \
            gcc \
            git \
            gperf \
            libffi-dev \
            libncurses-dev \
            libssl-dev \
            make \
            wget
      - name: Set environment variables
        id: set_env
        run: |
          SDK_NAME="ESP8266_RTOS_SDK"
          GCC_PREFIX="xtensa-lx106-elf"
          GCC_FILE="${GCC_PREFIX}-gcc"
          TOOLCHAIN_DIR="${HOME}/.espressif/tools"
          REPO_DIR=`pwd`
          EXAMPLE_DIR="${REPO_DIR}/examples"
          __PROJECT_PATH=`pwd`
          __PROJECT_TOOLCHAIN_VERSION="esp-2020r3-49-gd5524c1-8.4.0"
          # XXX actions/checkout does not allow to checkout a repository other
          # than under __PROJECT_PATH
          IDF_PATH="${__PROJECT_PATH}/idf"
          echo "IDF_PATH=${IDF_PATH}" >> ${GITHUB_ENV}
          # cache-idf-tools needs PROJECT_TOOLCHAIN_DIR
          echo "::set-output name=PROJECT_TOOLCHAIN_DIR::${TOOLCHAIN_DIR}"
          # XXX prefix all the environment variables with `__PROJECT_` to avoid pollution
          echo "__PROJECT_EXAMPLE_DIR=${EXAMPLE_DIR}" >> ${GITHUB_ENV}
          echo "__PROJECT_GCC_FILE=${GCC_FILE}" >> ${GITHUB_ENV}
          echo "__PROJECT_GCC_PREFIX=${GCC_PREFIX}" >> ${GITHUB_ENV}
          echo "__PROJECT_TOOLCHAIN_DIR=${TOOLCHAIN_DIR}" >> ${GITHUB_ENV}
          echo "__PROJECT_PATH=${__PROJECT_PATH}" >> ${GITHUB_ENV}
          echo "__PROJECT_BUILD_COMMAND=${__PROJECT_BUILD_COMMAND}" >> ${GITHUB_ENV}
          echo "__PROJECT_BUILD_COMMAND_ARG=${__PROJECT_BUILD_COMMAND_ARG}" >> ${GITHUB_ENV}
          echo "__PROJECT_TOOLCHAIN_VERSION=${__PROJECT_TOOLCHAIN_VERSION}" >> ${GITHUB_ENV}
      - name: Checkout the SDK
        uses: actions/checkout@v2
        with:
          repository: espressif/ESP8266_RTOS_SDK
          path: idf
          submodules: recursive
          ref: ${{ matrix.branch }}
          # XXX git.eclipse.org does not allow to fetch a commit. fetch all
          # the commits.
          fetch-depth: 0

      - name: Install python requirements (pip)
        run: |
          python -m pip install --user -r ${IDF_PATH}/requirements.txt
      - name: Cache toolchain
        id: cache-idf-tools
        if: ${{ matrix.branch != 'master' }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.set_env.outputs.PROJECT_TOOLCHAIN_DIR }}
          key: ${{ runner.os }}-${{ matrix.branch }}-esp8266-cache-tools

      - name: Install toolchain
        if: ${{ steps.cache-idf-tools.outputs.cache-hit != 'true' || matrix.branch == 'master' }}
        run: |
          ${IDF_PATH}/install.sh
      - name: Setup ccache (make)
        run: |
          __PROJECT_CCACHE_BIN_DIR="${HOME}/ccache_bin"
          mkdir -p "${__PROJECT_CCACHE_BIN_DIR}"
          (cd "${__PROJECT_CCACHE_BIN_DIR}" && ln -s /usr/bin/ccache "${__PROJECT_GCC_FILE}")
          echo "PATH=${__PROJECT_CCACHE_BIN_DIR}:$PATH:${__PROJECT_TOOLCHAIN_DIR}/${__PROJECT_GCC_PREFIX}/${__PROJECT_TOOLCHAIN_VERSION}/${__PROJECT_GCC_PREFIX}/bin" >> ${GITHUB_ENV}
          echo "CCACHE_BASEDIR=${__PROJECT_EXAMPLE_DIR}" >> ${GITHUB_ENV}
          echo "CCACHE_NOHASHDIR=true" >> ${GITHUB_ENV}
      - name: Build (make)
        if: ${{ matrix.build_method == 'make' }}
        run: |
          IGNORE_FILE="ci-ignore-esp8266"
          # these drivers do not compile for ESP8266 yet
          export EXCLUDE_COMPONENTS="max7219 mcp23x17 led_strip max31865"
          cd "${__PROJECT_EXAMPLE_DIR}"
          for i in $(ls -d *); do
            if [ ! -e "${__PROJECT_EXAMPLE_DIR}/${i}/${IGNORE_FILE}" ]; then
              cd "${__PROJECT_EXAMPLE_DIR}/${i}"
              echo "Building ${i}..."
              make defconfig
              make -j$(nproc)
            fi
          done


  # build:
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - name: Copy SDK Config
  #     run: |
  #       echo ${{ secrets.TWITTER_CONSUMER_API_KEY }}
  #       pwd
  #       cp boards/esp8266-rtossdk/* .
  #   - name: before_install
  #     run: |
  #       sudo apt update
  #       sudo apt install -y gcc git wget make libncurses-dev flex bison python python-setuptools python-serial ninja-build
  #       wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz
  #   - name: install
  #     run: |
  #       tar -xzf ./xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz
  #       python -m pip install --user -r ./ESP8266_RTOS_SDK/requirements.txt
  #   - name: script
  #     id: script
  #     run: |
  #       export IDF_PATH=$PWD/ESP8266_RTOS_SDK
  #       export PATH="$PATH:$PWD/xtensa-lx106-elf/bin"
  #       echo "FIRMWARE=$PWD/build" >> $GITHUB_ENV
  #       python ./idf.py fullclean
  #       python ./idf.py build
  #       echo "::set-output name=status::success"


